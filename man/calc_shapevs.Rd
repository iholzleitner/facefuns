% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_shapevs.R
\name{calc_shapevs}
\alias{calc_shapevs}
\title{Calculate vector scores from Procrustes-aligned landmark templates}
\usage{
calc_shapevs(
  data,
  anchor1_index,
  anchor2_index,
  symm = FALSE,
  mirroredlandmarks
)
}
\arguments{
\item{data}{Output from \link[facefuns]{facefuns}}

\item{anchor1_index}{Vector specifying indices of faces which will constitute lower anchor point}

\item{anchor2_index}{Vector specifying indices of faces which will constitute upper anchor point}

\item{symm}{Symmetrize templates prior to calculating vector scores}

\item{mirroredlandmarks}{Vector specifiying order of mirrored landmarks (required for symmetrizing)}
}
\value{
Returns tibble with columns "id" and "VS". If data contained rownames, these will be saved as ids.
}
\description{
Function projects data onto vector from anchor one (score of 0) to anchor two (score of 1). See \link[facefuns]{calc_vs}
}
\examples{

# READ AND PREP DATA
path_to_tem <- system.file("extdata", "tem", package="facefuns")

data <- read_lmdata(lmdata = path_to_tem,
                    plot = FALSE)

shapedata <- facefuns(data = data,
                      remove_points = "frlshape2019",
                      plot_sample = FALSE,
                      quiet = TRUE)

# CREATE ANCHORS, e.g. female and male averages
data("LondonSet_info")

# Specify indices of faces that will constitute male and female averages
fem_i <- gsub("^ID=","", dimnames(shapedata$aligned)[[3]]) \%in\%
LondonSet_info$face_id[which(LondonSet_info$face_sex == "female")]

mal_i <- gsub("^ID=", "", dimnames(shapedata$aligned)[[3]]) \%in\%
LondonSet_info$face_id[which(LondonSet_info$face_sex == "male")]

# CALCULATE FEMALE-MALE VECTOR SCORES
calc_shapevs(shapedata, fem_i, mal_i)


# CALCULATE FEMALE-MALE VECTOR SCORES FROM SYMMETRIZED FACES
# To symmetrize faces before calculating vector scores,
# you will have to provide indices of landmarks after mirroring

data("mirroredlandmarks")

calc_shapevs(shapedata, fem_i, mal_i,
             symm = TRUE, mirroredlandmarks = mirroredlandmarks)

}
